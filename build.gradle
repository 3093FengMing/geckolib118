buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


def snapshotVersion = System.getenv("GITHUB_RUN_NUMBER")
version = snapshotVersion == null ? project.mod_version : "SNAPSHOT-" + snapshotVersion

group = 'software.bernie.geckolib'
archivesBaseName = 'forge-1.15.2-geckolib'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20200225-1.15.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                geckolib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                geckolib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                geckolib {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    maven { url 'https://repo.repsy.io/mvn/fadookie/particleman' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.63'
    compile fg.deobf('com.eliotlash.molang:molang:SNAPSHOT.8')
    compile fg.deobf('com.eliotlash.mclib:mclib:SNAPSHOT.8')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    test {
        useJUnitPlatform()
    }
}

jar {
    from sourceSets.main.allSource
    manifest {
        attributes([
            "Specification-Title": "GeckoLib",
            "Specification-Vendor": "Gecko",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Gecko",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

sourceSets {
    main { output.resourcesDir = output.classesDir }
}

task javadocnew(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadocnew) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives packageJavadoc
    archives packageSources
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact packageSources
            artifact packageJavadoc
            artifactId = project.archives_base_name
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
artifacts {
    archives javadocJar
}

publishing {
    repositories {
        maven {
            url repsyUrl
            credentials {
                def envUsername = System.getenv("repsyUsername")
                def envPassword = System.getenv("repsyPassword")
                username = envUsername == null ? repsyUsername : envUsername
                password = envPassword == null ? repsyPassword : envPassword
            }
        }
    }
}